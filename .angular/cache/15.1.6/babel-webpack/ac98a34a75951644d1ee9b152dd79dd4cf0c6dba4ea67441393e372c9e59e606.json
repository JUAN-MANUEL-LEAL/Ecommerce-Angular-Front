{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../services/token.service\";\nexport class TokenInterceptor {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n  }\n  intercept(request, next) {\n    request = this.addToken(request);\n    return next.handle(request);\n  }\n  addToken(request) {\n    const token = this.tokenService.getToken();\n    if (token) {\n      const authReq = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return authReq;\n    }\n    return request;\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.TokenService));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"names":["TokenInterceptor","constructor","tokenService","intercept","request","next","addToken","handle","token","getToken","authReq","clone","headers","set","i0","ɵɵinject","i1","TokenService","factory","ɵfac"],"sources":["/home/linuxmachine/personalProyects/Angular-router/src/app/interceptors/token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { TokenService } from './../services/token.service';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(\n    private tokenService: TokenService\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    request = this.addToken(request);\n    return next.handle(request);\n  }\n\n  private addToken(request: HttpRequest<unknown>) {\n    const token = this.tokenService.getToken();\n    if (token) {\n      const authReq = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return authReq;\n    }\n    return request;\n  }\n}\n"],"mappings":";;AAYA,OAAM,MAAOA,gBAAgB;EAE3BC,YACUC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;EACnB;EAEHC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxDD,OAAO,GAAG,IAAI,CAACE,QAAQ,CAACF,OAAO,CAAC;IAChC,OAAOC,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC;EAC7B;EAEQE,QAAQA,CAACF,OAA6B;IAC5C,MAAMI,KAAK,GAAG,IAAI,CAACN,YAAY,CAACO,QAAQ,EAAE;IAC1C,IAAID,KAAK,EAAE;MACT,MAAME,OAAO,GAAGN,OAAO,CAACO,KAAK,CAAC;QAC5BC,OAAO,EAAER,OAAO,CAACQ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE;OAChE,CAAC;MACF,OAAOE,OAAO;;IAEhB,OAAON,OAAO;EAChB;;AApBWJ,gBAAgB,C;mBAAhBA,gBAAgB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;AAAA;AAAhBjB,gBAAgB,C;SAAhBA,gBAAgB;EAAAkB,OAAA,EAAhBlB,gBAAgB,CAAAmB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}